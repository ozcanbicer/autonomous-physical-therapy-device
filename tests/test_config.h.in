/**
 * @file test_config.h
 * @brief Test configuration header for medical device testing
 * 
 * This file contains test configuration constants and paths
 * for comprehensive medical device testing.
 * 
 * @note This file is automatically generated by CMake
 * @version @PROJECT_VERSION@
 */

#pragma once

#include <string>

namespace therapy_device {
namespace testing {

// Project information
constexpr const char* PROJECT_NAME = "@PROJECT_NAME@";
constexpr const char* PROJECT_VERSION = "@PROJECT_VERSION@";
constexpr const char* BUILD_TYPE = "@CMAKE_BUILD_TYPE@";

// Test configuration
constexpr const char* TEST_DATA_DIR = "@TEST_DATA_DIR@";
constexpr const char* TEST_FIXTURES_DIR = "@TEST_FIXTURES_DIR@";
constexpr int TESTING_TIMEOUT = @TESTING_TIMEOUT@;
constexpr int COVERAGE_THRESHOLD = @TESTING_COVERAGE_THRESHOLD@;

// Platform information
constexpr const char* TARGET_PLATFORM = "@TARGET_PLATFORM@";
constexpr bool IS_JETSON = @IS_JETSON@;

// Feature availability for testing
constexpr bool HAS_REALSENSE = @HAS_REALSENSE@;
constexpr bool HAS_ORBBEC = @HAS_ORBBEC@;
constexpr bool HAS_MEDIAPIPE = @HAS_MEDIAPIPE@;
constexpr bool HAS_WEBSOCKET = @HAS_WEBSOCKET@;

#ifdef @TENSORRT_FOUND@
constexpr bool HAS_TENSORRT = true;
#else
constexpr bool HAS_TENSORRT = false;
#endif

#ifdef THERAPY_DEVICE_HAS_GMOCK
constexpr bool HAS_GMOCK = true;
#else
constexpr bool HAS_GMOCK = false;
#endif

// Test data paths
namespace paths {
    const std::string TEST_DATA = "@TEST_DATA_DIR@";
    const std::string TEST_FIXTURES = "@TEST_FIXTURES_DIR@";
    const std::string SAMPLE_IMAGES = "@TEST_DATA_DIR@/images";
    const std::string SAMPLE_DEPTH = "@TEST_DATA_DIR@/depth";
    const std::string SAMPLE_CONFIGS = "@TEST_DATA_DIR@/configs";
    const std::string MOCK_DATA = "@TEST_DATA_DIR@/mocks";
}

// Medical device test requirements
namespace medical_device {
    constexpr double MAX_LATENCY_MS = 500.0;
    constexpr double MIN_ACCURACY = 0.95;
    constexpr int MAX_MEMORY_MB = 8192;
    constexpr double MAX_POWER_WATTS = 25.0;
    constexpr int MIN_FPS = 30;
    
    // Safety test parameters
    constexpr double SAFETY_TIMEOUT_SECONDS = 5.0;
    constexpr int MAX_CONSECUTIVE_FAILURES = 3;
    constexpr double MIN_CONFIDENCE_SCORE = 0.8;
}

// Performance test parameters
namespace performance {
    constexpr int BENCHMARK_ITERATIONS = 1000;
    constexpr int STRESS_TEST_DURATION_SECONDS = 300;  // 5 minutes
    constexpr int LOAD_TEST_CONCURRENT_SESSIONS = 10;
    constexpr double PERFORMANCE_TOLERANCE = 0.1;  // 10% tolerance
}

// Test categories
namespace categories {
    constexpr const char* UNIT = "Unit";
    constexpr const char* INTEGRATION = "Integration";
    constexpr const char* PERFORMANCE = "Performance";
    constexpr const char* COMPLIANCE = "Compliance";
    constexpr const char* SAFETY = "Safety";
    constexpr const char* MEDICAL = "Medical";
    constexpr const char* HARDWARE = "Hardware";
    constexpr const char* STRESS = "Stress";
}

// Test fixtures and sample data
namespace fixtures {
    // Camera test data
    constexpr int SAMPLE_FRAME_WIDTH = 640;
    constexpr int SAMPLE_FRAME_HEIGHT = 480;
    constexpr int SAMPLE_DEPTH_SCALE = 1000;  // 1mm per unit
    
    // AI test data
    constexpr int SAMPLE_POSE_LANDMARKS = 33;
    constexpr double SAMPLE_POSE_CONFIDENCE = 0.95;
    
    // Session test data
    constexpr const char* SAMPLE_SESSION_ID = "TEST_SESSION_001";
    constexpr const char* SAMPLE_PATIENT_ID = "PATIENT_TEST_001";
    constexpr const char* SAMPLE_USER_ID = "USER_TEST_001";
}

} // namespace testing
} // namespace therapy_device
