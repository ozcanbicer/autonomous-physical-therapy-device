/**
 * @file config.h
 * @brief Configuration header for Autonomous Physical Therapy Device
 * 
 * This file is automatically generated by CMake and contains compile-time
 * configuration options for the medical device software.
 * 
 * @note This file is part of IEC 62304 Class C medical device software
 * @version @PROJECT_VERSION@
 */

#pragma once

#include <string>

namespace therapy_device {
namespace config {

// Project information
constexpr const char* PROJECT_NAME = "@PROJECT_NAME@";
constexpr const char* PROJECT_VERSION = "@PROJECT_VERSION@";
constexpr const char* PROJECT_DESCRIPTION = "@PROJECT_DESCRIPTION@";

// Build configuration
constexpr const char* BUILD_TYPE = "@CMAKE_BUILD_TYPE@";
constexpr const char* TARGET_PLATFORM = "@TARGET_PLATFORM@";
constexpr bool IS_JETSON = @IS_JETSON@;

// Hardware support flags
constexpr bool HAS_REALSENSE = @HAS_REALSENSE@;
constexpr bool HAS_ORBBEC = @HAS_ORBBEC@;
constexpr bool HAS_MEDIAPIPE = @HAS_MEDIAPIPE@;
constexpr bool HAS_WEBSOCKET = @HAS_WEBSOCKET@;

#ifdef @TENSORRT_FOUND@
constexpr bool HAS_TENSORRT = true;
#else
constexpr bool HAS_TENSORRT = false;
#endif

// Performance requirements (IEC 62304 Class C)
namespace performance {
    constexpr int MAX_LATENCY_MS = 500;           // Maximum end-to-end latency
    constexpr int TARGET_FPS = 30;               // Target frame rate
    constexpr int MAX_MEMORY_MB = 8192;          // Maximum memory usage (8GB)
    constexpr int MAX_POWER_WATTS = 25;          // Maximum power consumption
    constexpr float MIN_ACCURACY = 0.95f;        // Minimum pose estimation accuracy
}

// Safety and compliance settings
namespace safety {
    constexpr bool ENABLE_SAFETY_CHECKS = true;
    constexpr bool ENABLE_AUDIT_LOGGING = true;
    constexpr bool ENABLE_ENCRYPTION = true;
    constexpr int WATCHDOG_TIMEOUT_MS = 1000;
    constexpr int MAX_RETRY_ATTEMPTS = 3;
}

// Camera configuration
namespace camera {
    constexpr int DEFAULT_WIDTH = 640;
    constexpr int DEFAULT_HEIGHT = 480;
    constexpr int DEFAULT_FPS = 30;
    constexpr float DEFAULT_DEPTH_SCALE = 0.001f;  // 1mm per unit
}

// AI processing configuration
namespace ai {
    constexpr float POSE_CONFIDENCE_THRESHOLD = 0.5f;
    constexpr float LANDMARK_VISIBILITY_THRESHOLD = 0.5f;
    constexpr int MAX_TRACKING_PERSONS = 1;
    constexpr bool ENABLE_FACE_DETECTION = false;  // Privacy protection
}

// Communication settings
namespace communication {
    constexpr int WEBSOCKET_PORT = 8080;
    constexpr int MQTT_PORT = 1883;
    constexpr int MAX_CONNECTIONS = 10;
    constexpr int HEARTBEAT_INTERVAL_MS = 5000;
}

// Logging configuration
namespace logging {
    constexpr const char* DEFAULT_LOG_LEVEL = "INFO";
    constexpr int MAX_LOG_FILE_SIZE_MB = 100;
    constexpr int MAX_LOG_FILES = 10;
    constexpr bool ENABLE_CONSOLE_OUTPUT = true;
    constexpr bool ENABLE_FILE_OUTPUT = true;
}

// Database configuration
namespace database {
    constexpr const char* DEFAULT_CONNECTION_TIMEOUT = "30";
    constexpr int MAX_CONNECTIONS = 20;
    constexpr bool ENABLE_CONNECTION_POOLING = true;
    constexpr bool ENABLE_SSL = true;
}

// Security settings
namespace security {
    constexpr const char* ENCRYPTION_ALGORITHM = "AES-256-GCM";
    constexpr int KEY_SIZE_BITS = 256;
    constexpr int IV_SIZE_BYTES = 12;
    constexpr int AUTH_TAG_SIZE_BYTES = 16;
    constexpr bool ENABLE_CERTIFICATE_VALIDATION = true;
}

// Error codes (IEC 62304 traceability)
namespace error_codes {
    constexpr int SUCCESS = 0;
    constexpr int CAMERA_INIT_FAILED = 1001;
    constexpr int CAMERA_CONNECTION_LOST = 1002;
    constexpr int AI_PROCESSING_FAILED = 2001;
    constexpr int AI_MODEL_LOAD_FAILED = 2002;
    constexpr int COMMUNICATION_FAILED = 3001;
    constexpr int DATABASE_CONNECTION_FAILED = 4001;
    constexpr int SECURITY_VIOLATION = 5001;
    constexpr int MEMORY_ALLOCATION_FAILED = 6001;
    constexpr int CONFIGURATION_ERROR = 7001;
    constexpr int HARDWARE_FAULT = 8001;
    constexpr int SAFETY_VIOLATION = 9001;
}

// Version information for traceability
namespace version {
    constexpr const char* GIT_COMMIT_HASH = "@GIT_COMMIT_HASH@";
    constexpr const char* BUILD_TIMESTAMP = "@BUILD_TIMESTAMP@";
    constexpr const char* COMPILER_VERSION = "@CMAKE_CXX_COMPILER_ID@ @CMAKE_CXX_COMPILER_VERSION@";
}

} // namespace config
} // namespace therapy_device

// Compile-time assertions for critical requirements
static_assert(therapy_device::config::performance::MAX_LATENCY_MS <= 500, 
              "Maximum latency exceeds IEC 62304 Class C requirement");

static_assert(therapy_device::config::performance::MIN_ACCURACY >= 0.95f, 
              "Minimum accuracy below clinical requirement");

static_assert(therapy_device::config::performance::MAX_MEMORY_MB <= 8192, 
              "Memory requirement exceeds Jetson Orin NX capacity");

// Feature availability macros
#if @HAS_REALSENSE@
#define THERAPY_DEVICE_HAS_REALSENSE 1
#else
#define THERAPY_DEVICE_HAS_REALSENSE 0
#endif

#if @HAS_ORBBEC@
#define THERAPY_DEVICE_HAS_ORBBEC 1
#else
#define THERAPY_DEVICE_HAS_ORBBEC 0
#endif

#if @HAS_MEDIAPIPE@
#define THERAPY_DEVICE_HAS_MEDIAPIPE 1
#else
#define THERAPY_DEVICE_HAS_MEDIAPIPE 0
#endif

// Debug/Release specific configurations
#ifdef DEBUG
    #define THERAPY_DEVICE_DEBUG 1
    #define THERAPY_DEVICE_ENABLE_VERBOSE_LOGGING 1
    #define THERAPY_DEVICE_ENABLE_PERFORMANCE_PROFILING 1
#else
    #define THERAPY_DEVICE_DEBUG 0
    #define THERAPY_DEVICE_ENABLE_VERBOSE_LOGGING 0
    #define THERAPY_DEVICE_ENABLE_PERFORMANCE_PROFILING 0
#endif

// Medical device compliance macros
#define THERAPY_DEVICE_IEC62304_CLASS_C 1
#define THERAPY_DEVICE_HIPAA_COMPLIANT 1
#define THERAPY_DEVICE_GDPR_COMPLIANT 1
